From 16100faa8369edd26eaa97140a4803c2b361e587 Mon Sep 17 00:00:00 2001
From: Wright Feng <wright.feng@cypress.com>
Date: Wed, 29 Apr 2020 03:40:41 -0500
Subject: [PATCH 116/130] brcmfmac: add Android Wi-Fi STA/AP concurrency
 support

Android 9 introduces the ability for devices to operate in STA and AP
mode concurrently. For devices supporting Dual Band Simultaneous (DBS),
this feature opens up new capabilities such as not disrupting STA Wi-Fi
when a user wants to enable hotspot (softAP).
In host side, we create wlan1 as AP interface after bringing up wlan0
interface. To avoid the conflict with P2P, we remove wlan1 interface
before creating P2P interface and add it back after removing P2P
interface.

Verfied: STA+AP and STA+P2P combinations
Signed-off-by: Wright Feng <wright.feng@cypress.com>
---
 .../broadcom/brcm80211/brcmfmac/android.h        |  1 +
 .../broadcom/brcm80211/brcmfmac/cfg80211.c       | 16 +++++++++++++---
 .../broadcom/brcm80211/brcmfmac/cfg80211.h       |  4 ++++
 .../wireless/broadcom/brcm80211/brcmfmac/core.c  | 13 +++++++++++--
 4 files changed, 29 insertions(+), 5 deletions(-)

diff --git a/drivers/net/wireless/broadcom/brcm80211/brcmfmac/android.h b/drivers/net/wireless/broadcom/brcm80211/brcmfmac/android.h
index 09467cdd1b0f..6b0272ab8927 100644
--- a/drivers/net/wireless/broadcom/brcm80211/brcmfmac/android.h
+++ b/drivers/net/wireless/broadcom/brcm80211/brcmfmac/android.h
@@ -77,6 +77,7 @@ struct brcmf_android {
 	u16 pkt_filter_list;
 	void *fw_mem_dump;
 	size_t fw_mem_dump_len;
+	u8 enabled_ndev_num;
 };
 #endif /* defined(CONFIG_BRCMFMAC_ANDROID) */
 
diff --git a/drivers/net/wireless/broadcom/brcm80211/brcmfmac/cfg80211.c b/drivers/net/wireless/broadcom/brcm80211/brcmfmac/cfg80211.c
index f93da000f7c5..1d580d398c40 100644
--- a/drivers/net/wireless/broadcom/brcm80211/brcmfmac/cfg80211.c
+++ b/drivers/net/wireless/broadcom/brcm80211/brcmfmac/cfg80211.c
@@ -555,7 +555,6 @@ static int brcmf_cfg80211_request_ap_if(struct brcmf_if *ifp)
  * @name: name of the new interface.
  * @params: contains mac address for AP device.
  */
-static
 struct wireless_dev *brcmf_ap_add_vif(struct wiphy *wiphy, const char *name,
 				      struct vif_params *params)
 {
@@ -638,6 +637,7 @@ static struct wireless_dev *brcmf_cfg80211_add_iface(struct wiphy *wiphy,
 	struct brcmf_pub *drvr = cfg->pub;
 	struct wireless_dev *wdev;
 	int err;
+	struct brcmf_cfg80211_vif *vif_walk;
 
 	brcmf_dbg(TRACE, "enter: %s type %d\n", name, type);
 	err = brcmf_vif_add_validate(wiphy_to_cfg(wiphy), type);
@@ -658,6 +658,12 @@ static struct wireless_dev *brcmf_cfg80211_add_iface(struct wiphy *wiphy,
 		break;
 	case NL80211_IFTYPE_P2P_CLIENT:
 	case NL80211_IFTYPE_P2P_GO:
+		list_for_each_entry(vif_walk, &cfg->vif_list, list) {
+			if (vif_walk->wdev.iftype == NL80211_IFTYPE_AP) {
+				brcmf_cfg80211_del_ap_iface(wiphy, &vif_walk->wdev);
+				break;
+			}
+		}
 	case NL80211_IFTYPE_P2P_DEVICE:
 		wdev = brcmf_p2p_add_vif(wiphy, name, name_assign_type, type, params);
 		break;
@@ -774,8 +780,8 @@ s32 brcmf_notify_escan_complete(struct brcmf_cfg80211_info *cfg,
 	return err;
 }
 
-static int brcmf_cfg80211_del_ap_iface(struct wiphy *wiphy,
-				       struct wireless_dev *wdev)
+int brcmf_cfg80211_del_ap_iface(struct wiphy *wiphy,
+				struct wireless_dev *wdev)
 {
 	struct brcmf_cfg80211_info *cfg = wiphy_to_cfg(wiphy);
 	struct net_device *ndev = wdev->netdev;
@@ -813,6 +819,7 @@ int brcmf_cfg80211_del_iface(struct wiphy *wiphy, struct wireless_dev *wdev)
 {
 	struct brcmf_cfg80211_info *cfg = wiphy_to_cfg(wiphy);
 	struct net_device *ndev = wdev->netdev;
+	int err;
 
 	if (ndev && ndev == cfg_to_ndev(cfg))
 		return -ENOTSUPP;
@@ -842,6 +849,9 @@ int brcmf_cfg80211_del_iface(struct wiphy *wiphy, struct wireless_dev *wdev)
 		return brcmf_cfg80211_del_ap_iface(wiphy, wdev);
 	case NL80211_IFTYPE_P2P_CLIENT:
 	case NL80211_IFTYPE_P2P_GO:
+		err = brcmf_p2p_del_vif(wiphy, wdev);
+		brcmf_ap_add_vif(wiphy, "wlan1", NULL);
+		return err;
 	case NL80211_IFTYPE_P2P_DEVICE:
 		return brcmf_p2p_del_vif(wiphy, wdev);
 	case NL80211_IFTYPE_UNSPECIFIED:
diff --git a/drivers/net/wireless/broadcom/brcm80211/brcmfmac/cfg80211.h b/drivers/net/wireless/broadcom/brcm80211/brcmfmac/cfg80211.h
index 8f9007db8454..ce849e096bb3 100644
--- a/drivers/net/wireless/broadcom/brcm80211/brcmfmac/cfg80211.h
+++ b/drivers/net/wireless/broadcom/brcm80211/brcmfmac/cfg80211.h
@@ -543,6 +543,10 @@ int brcmf_setup_wiphybands(struct brcmf_cfg80211_info *cfg);
 #ifdef CONFIG_BRCMFMAC_ANDROID
 struct brcmf_if *brcmf_cfg80211_register_if(struct device *dev,
 					    struct brcmf_mp_device *settings);
+struct wireless_dev *brcmf_ap_add_vif(struct wiphy *wiphy, const char *name,
+				      struct vif_params *params);
+int brcmf_cfg80211_del_ap_iface(struct wiphy *wiphy,
+				struct wireless_dev *wdev);
 #endif
 s32 brcmf_cfg80211_set_ap_wps_p2p_ie(struct brcmf_cfg80211_vif *vif,
 				     char *buf, int len,
diff --git a/drivers/net/wireless/broadcom/brcm80211/brcmfmac/core.c b/drivers/net/wireless/broadcom/brcm80211/brcmfmac/core.c
index 99cef546c408..c315cfa2cdec 100644
--- a/drivers/net/wireless/broadcom/brcm80211/brcmfmac/core.c
+++ b/drivers/net/wireless/broadcom/brcm80211/brcmfmac/core.c
@@ -1347,6 +1347,8 @@ static int brcmf_bus_started(struct brcmf_pub *drvr, struct cfg80211_ops *ops)
 	brcmf_proto_debugfs_create(drvr);
 	brcmf_bus_debugfs_create(bus_if);
 
+	brcmf_ap_add_vif(drvr->wiphy, "wlan1", NULL);
+
 	return 0;
 
 fail:
@@ -2117,9 +2119,10 @@ int brcmf_android_netdev_open(struct net_device *ndev)
 	u32 timeout;
 	int ret = 0;
 
+	brcmf_dbg(INFO, "Opening IF:%s\n", ndev->name);
 	brcmf_android_wake_lock(drvr);
 
-	if (ifp->bsscfgidx == 0) {
+	if (android->enabled_ndev_num == 0) {
 		if (brcmf_android_wifi_is_on(drvr)) {
 			brcmf_err("android wifi is on already\n");
 			ret = -EAGAIN;
@@ -2155,6 +2158,8 @@ int brcmf_android_netdev_open(struct net_device *ndev)
 		return ret;
 	}
 	ret = brcmf_netdev_open(ndev);
+	if (!ret)
+		android->enabled_ndev_num++;
 
 	brcmf_android_wake_unlock(drvr);
 
@@ -2166,13 +2171,17 @@ int brcmf_android_netdev_stop(struct net_device *ndev)
 {
 	struct brcmf_if *ifp = netdev_priv(ndev);
 	struct brcmf_pub *drvr = ifp->drvr;
+	struct brcmf_android *android = drvr->android;
 	int ret;
 
+	brcmf_dbg(INFO, "Stopping IF:%s\n", ndev->name);
 	brcmf_android_wake_lock(drvr);
 
 	ret = brcmf_netdev_stop(ndev);
+	if (!ret)
+		android->enabled_ndev_num--;
 
-	if (ifp->bsscfgidx == 0) {
+	if (android->enabled_ndev_num == 0) {
 		brcmf_android_wifi_off(ifp->drvr, ndev);
 		brcmf_android_set_reset(ifp->drvr, true);
 		g_drvr = ifp->drvr;
-- 
2.25.0

